#!/usr/bin/perl

# Copyright (C) 2012 Keith Thompson

# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

# index-tree: Index a specified directory tree, storing information in a
# created ".index" directory.  For example, all "*.c" files are listed in
# ".index/c".
# 
# TODO:
# 
#     Generate a reverse-sorted list, so files with the same suffix
#     are grouped together, to minimize closing and re-opening
#     generated files.
#
#     Optionally index text, binary, and utf-16 files (see "classify",
#     not yet released).  Think about how to generate these lists without
#     storing them in memory.
#
#     Optionally use iconv to generate utf-8 translations of utf-16
#     files.  Remove generated utf-8 file if iconv fails (likely
#     because of a false positive from "classify" or equivalent).
#
#     Add an option to continue processing after some errors (?).

use strict;
use warnings;

use File::Spec ();
use Getopt::Long ();
use File::Find ();
use Pod::Usage ();

my $Program_Name = (File::Spec->splitpath($0))[2];

my %Opt = ();
my @Opts = ( \%Opt, qw( help!
                        man!
                        skip-rcs!
                        skip-cvs!
                        skip-svn!
                        skip-hg!
                        skip-git!
                        skip-version-control|skip!
                        ignore-case!
                        debugging! ) );
Getopt::Long::GetOptions @Opts or Pod::Usage::pod2usage(1);
Pod::Usage::pod2usage(1) if $Opt{help};
Pod::Usage::pod2usage(-verbose => 2) if $Opt{man};
Pod::Usage::pod2usage(1) if scalar @ARGV != 1;

my $Dir = $ARGV[0];
die "$Dir does not exist\n"     if not -e $Dir;
die "$Dir is not a directory\n" if not -d $Dir;

my $index_dir         = "$Dir/.index";
my $all_unsorted_file = "$index_dir/.all.unsorted";
my $all_file          = "$index_dir/.all";
my $file_file         = "$index_dir/.file";

mkdir $index_dir or die "$index_dir: $!\n";
open my $ALL_UNSORTED, '>', $all_unsorted_file or die "$all_unsorted_file: $!\n";

my %skip = ( "$index_dir/\n"        => 1,
             "$all_unsorted_file\n" => 1 );

my @find_command = ('find', $Dir);

my @skip_dirs = qw(.index);
if ($Opt{'skip-version-control'}) {
    push @skip_dirs, qw(RCS CVS .svn .hg .git);
}
else {
    push @skip_dirs, 'RCS'  if $Opt{'skip-rcs'};
    push @skip_dirs, 'CVS'  if $Opt{'skip-cvs'};
    push @skip_dirs, '.svn' if $Opt{'skip-svn'};
    push @skip_dirs, '.hg'  if $Opt{'skip-hg'};
    push @skip_dirs, '.git' if $Opt{'skip-git'};
}

my %skip_dir = map { $_ => 1 } @skip_dirs;

no warnings 'File::Find';
File::Find::find(\&Wanted, $Dir);

my $sort_command = "sort";
$sort_command .= " -f" if $Opt{'ignore-case'};
$sort_command .= " $all_unsorted_file > $all_file";
my $sort_result = system $sort_command;
if ($sort_result != 0) {
    die sprintf("sort: system() returned 0x%x\n", $sort_result);
}
if (-s $all_file != -s $all_unsorted_file) {
    die sprintf("Size mismatch:\n%10d %s\n%10d %s\n",
                $all_file, -s $all_file,
                $all_unsorted_file, -s $all_unsorted_file);
}
unlink $all_unsorted_file;

my $SUFFIX;
my $curr_suffix = undef;
my $suffix_file = undef;
open my $ALL, '<', $all_file or die "$all_file: $!\n";
open my $FILES, '>', $file_file or die "$file_file: $!\n";
while (my $filename = <$ALL>) {
    print $FILES $filename if $filename !~ /\/$/;
    chomp $filename;
    my $suffix = Suffix($filename);
    if (not defined $curr_suffix or $suffix ne $curr_suffix) {
        if (defined $suffix_file) {
            close $SUFFIX or die "$suffix_file: $!\n";
        }
        $suffix_file = "$index_dir/$suffix";
        open $SUFFIX, '>>', $suffix_file or die "$suffix_file: $!\n";
        $curr_suffix = $suffix;
    }
    print $SUFFIX "$filename\n" or die "$suffix_file: $!\n";
}
close $ALL or die "$all_file: $!\n";
if (defined $suffix_file) {
    close $SUFFIX or die "$suffix_file: $!\n";
}

########################################################################

sub Wanted {
    my $is_dir = -d $_;
    my $marker = $is_dir ? '/' : '';
    if ($is_dir and $skip_dir{$_}) {
        $File::Find::prune = 1;
    }
    else {
        my $name = $File::Find::name;
        if ($name =~ m{^\./.}) {
            $name = substr($name, 2);
        }
        print $ALL_UNSORTED "$name$marker\n";
    }
} # Wanted

# ----------------------------------------------------------------------

sub Suffix {
    my($name) = @_;
    if ($name =~ m|/$|) {
        return '.dir';
    }
    else {
        $name =~ s|.*/||;
        if ($name =~ /\.([^.]+)$/) {
            if ($Opt{'ignore-case'}) {
                return lc $1;
            }
            else {
                return $1;
            }
        }
        else {
            return '.nosuffix';
        }
    }
} # Suffix

# ----------------------------------------------------------------------

sub Debug {
    print @_ if $Opt{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Usage {
    print ">>> Usage()\n";
    Pod::Usage::pod2usage(42);
    print ">>> Leaving Usage()\n";
    return;
    if (@_) {
        Pod::Usage::pod2usage(message => "@_");
    }
    else {
        Pod::Usage::pod2usage();
    }
} # Usage

# sub Usage {
#     print <<"EOF";
# @{_}Usage: $Program_Name [options] directory
# Generate index information for the specified directory and all its
# descendents, stored in .index subdirectory.
# Options may be abbreviated uniquely
# Options:
#     -help          Show this message and exit.
#     -skip-rcs      Ignore any RCS directories and their contents
#     -skip-cvs      Ignore any CVS directories and their contents
#     -skip-svn      Ignore any .svn directories and their contents
#     -skip-hg       Ignore any .hg directories and their contents (Mercurial)
#     -skip-git      Ignore any .git directories and their contents
#     -skip-version-control
#                    Ignore all of the above
#     -ignore-case   Treat foo.C and foo.c as having the same suffix
#     -debugging     Show debugging output
# EOF
#     exit 1;
# } # Usage

=pod

=head1 NAME

index-tree - Generate index information for the specified directory

=head1 SYNOPSIS

index-tree [options] directory

Generate index information for the specified directory and all its
descendents, storing it in a C<.index> subdirectory.

=head1 DESCRIPTION

For each file suffix, a list of files with that suffix is created
under C<.index>; for example, C<.index/txt> will contain a list of
all C<*.txt> files anywhere under the specified directory.

In addition:

C<.index/.all> is a list of all files and directories

C<.index/.dir> is a list of all directories

C<.index/.file> is a list of all files

C<.index/.nosuffix> is a list of all files whose names do not contain C<.>

=head1 OPTIONS

 Options may be abbreviated uniquely
 -help          Show this message and exit.
 -man           Show man page
 -skip-rcs      Ignore any RCS directories and their contents
 -skip-cvs      Ignore any CVS directories and their contents
 -skip-svn      Ignore any .svn directories and their contents
 -skip-hg       Ignore any .hg directories and their contents (Mercurial)
 -skip-git      Ignore any .git directories and their contents
 -skip-version-control
                Ignore all of the above
 -ignore-case   Treat foo.C and foo.c as having the same suffix
 -debugging     Show debugging output
